kubernetesDistribution: Vanilla  #Vanilla for community kubernetes distribution else Openshift for Openshift

## In case of using these charts on Openshift then please use UBI images
## To know more about them follow this tutorial https://gitlab.eurecom.fr/oai/cn5g/oai-cn5g-fed/-/tree/master/openshift
nfimage:   # image name either locally present or in a public/private repository
  repository: @CUUP_REPO@ #docker.io/oaisoftwarealliance/oai-nr-cuup ## dockerhub oaisoftwarealliance/oai-gnb  
  version: @CUUP_TAG@ # 2023.w49 # image tag or develop
  # pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

## good to use when pulling images from docker-hub mention 
imagePullSecrets: 
  - name: "regcred"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: @NAME_CUUP_SA@ # "oai-cu-up-sa"

# oai-cu-up can be configured with multiple interface which may correspond to 3GPP logical interfaces. There can be one to one or one to many. 
# In case of one to one mapping e1,f1u,n3 all can have separate virtual interfaces. 
# In one to many mapping e1,f1u and n3 all can be mapped to one virtual interface. 
# Interface mapping is strictly based on your networking environment 
## Change these ip-addresses according to your environment 

multus:
  # to remove the default gateway change it with ""
  defaultGateway: ""
  e1Interface:
    create: @MULTUS_CUUP_E1@ # false
    ipAdd: "@IP_CUUP_E1@" # "192.168.18.13"
    netmask: "@NETMASK_CUUP_E1@" # "24"
    # if mac is empty then it will be removed
    mac: "@MAC_CUUP_E1@"    
    name: "e1"
    # if gateway is empty then it will be removed
    gateway: "@GW_CUUP_E1@"
    routes: @ROUTES_CUUP_E1@ # [{'dst': '10.8.0.0/24','gw': '172.21.7.254'}, {'dst': '10.9.0.0/24','gw': '172.21.7.254'}]
    hostInterface: "@IF_NAME_CUUP_E1@" # "bond0" # Interface of the host machine on which this pod will be scheduled
  n3Interface:
    create: @MULTUS_CUUP_N3@
    name: "@GNB_N3_IF_NAME@"
    ipAdd: "@IP_CUUP_N3@"
    netmask: "@NETMASK_CUUP_N3@"
    # if mac is empty then it will be removed
    mac: "@MAC_CUUP_N3@"
    # if gateway is empty then it will be removed
    gateway:  "@GW_CUUP_N3@"
    routes: @ROUTES_CUUP_N3@
    hostInterface: "@IF_NAME_CUUP_N3@" # Interface of the host machine on which this pod will be scheduled
  f1uInterface:
    create: @MULTUS_CUUP_F1@ # false
    ipAdd: "@IP_CUUP_F1@" # "172.21.16.93"
    netmask: "@NETMASK_CUUP_F1@" # "22"
    # if mac is empty then it will be removed
    mac: "@MAC_CUUP_F1@"
    name: "f1u"
    # if gateway is commented then it will be removed
    gateway: "@GW_CUUP_F1@" # "172.21.19.254"
    routes: @ROUTES_CUUP_F1@
    hostInterface: "@IF_NAME_CUUP_F1@"  # Interface of the host machine on which this pod will be scheduled

## configuration file is in template/config.yaml 
## It is taken from https://gitlab.eurecom.fr/oai/openairinterface5g/-/blob/develop/ci-scripts/conf_files/gnb-cuup.sa.f1.conf
config:
  timeZone: "Europe/Paris"
  useAdditionalOptions: "@ADD_OPTIONS_CUUP@" # "--sa"
  cuupName: "@NAME_CUUP@" # "oai-cuup"
  mcc: "@MCC@" # check the information with AMF, SMF, UPF
  mnc: "@MNC@" # check the information with AMF, SMF, UPF
  tac: "@TAC@" # check the information with AMF
  sst1: "@SST1@" #currently only 4 standard values are allowed 1,2,3,4
  sd1: "@SD1@" # must be in HEX format
  sst2: "@SST2@" #currently only 4 standard values are allowed 1,2,3,4
  sd2: "@SD2@" # must be in HEX format
  cuCpHost: "@HOST_CUCP@" # "oai-cu" #
  n3IfName: "@GNB_N3_IF_NAME@" # if multus.n3Interface.create is true then use n3 or eth0
  f1IfName: "f1u" # "eth0"   #if multus.f1Interface.create is true then use f1
  e1IfName: "@E1IFNAME@" # "eth0"   #if multus.e1Interface.create is true then use e1
  f1cuPort: "@F1CUPORT@" # "2153"   #2153 if using same interface for f1 and n3 else standard port 2152 should be use if f1 and n3 interface are different
  f1duPort: "@F1DUPORT@" # "2153"   #2153 if using same interface for f1 and n3 else standard port 2152 should be use if f1 and n3 interface are different

## Debugging section
podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

securityContext:
  privileged: false

start:
  oaicuup: true #If false the network function container will run in sleep mode for manually testing
  tcpdump: @START_TCPDUMP@

includeTcpDumpContainer: @TCPDUMP_CONTAINER@ #If true it will add a tcpdump container inside network function pod for debugging

tcpdumpimage:
  repository: docker.io/oaisoftwarealliance/oai-tcpdump-init
  version: alpine-3.20
  #pullPolicy: IfNotPresent or Never or Always
  pullPolicy: IfNotPresent

persistent:
  sharedvolume: @SHAREDVOLUME@
  volumeName: oai5g-volume
  size: 1Gi

## NF is the network function and tcpdump is the tcpdump container. 
## To know more about request and limit it is better to understand that how Kubernetes QoS works. 
## https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
## https://kubernetes.io/docs/concepts/workloads/pods/pod-qos
resources:
  define:  @QOS_CUUP_DEF@
  limits:
    nf:
      cpu: 100m
      memory: 128Mi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi
  requests:
    nf:
      cpu: 100m
      memory: 128Mi
    #If tcpdump container is disabled this value will not be used
    tcpdump:
      cpu: 100m
      memory: 128Mi

tolerations: []

affinity: {}

terminationGracePeriodSeconds: 5

nodeSelector: {}

nodeName: @NODE_CUUP@
